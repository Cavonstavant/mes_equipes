name: Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: ['opened', 'edited', 'reopened', 'synchronize', 'ready_for_review']

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    container: epitechcontent/epitest-docker:devel
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      run: cmake -B ./build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ./build

    - name: Launch tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        cmake -B ./build -DCODE_COVERAGE=ON
        cmake --build ./build
        ctest --output-on-failure --test-dir build
        gcovr --exclude tests/ --branches --json --output build/branches_coverage.json
        gcovr --exclude tests/ --add-tracefile build/branches_coverage.json --json --output build/coverage.json

    - uses: codecov/codecov-action@v2
      with:
        files: build/coverage.json
        fail_ci_if_error: true
